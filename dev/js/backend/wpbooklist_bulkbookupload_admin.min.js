/**
 * JavaScript Admin Functions - wpbooklist-bulkbookupload-admin.min.js
 *
 * @author   Jake Evans
 * @category JavaScript
 * @package  Includes/Assets/Js
 * @version  6.0.0
 */

console.log( 'This is the JavaScript Object that holds all PHP Variables for use in JavaScript' );
console.log( wpbooklistBulkBookUploadPhpVariables );


// All functions wrapped in jQuery( document ).ready()...
jQuery( document ).ready( function( $ ) {
	'use strict';

	/* BEGINNING SECTION TO CALL ALL FUNCTIONS IN FILE... */

	// Function to display the admin pointer message when entering the Question Mark image with mouse...
	wpbooklistBulkBookUploadAdminPointersJavascript();

	// Function that will handle the saving of the user's License Key.
	wpbooklistBulkBookUploadPluginPageDashboardSaveKey();

	// Function that will actualy kick off the adding of books.
	wpbooklistBulkBookUploadPluginAddBooks();

	// Function that will handle the saving of the user's License Key.
	function wpbooklistBulkBookUploadPluginPageDashboardSaveKey() {

		console.log('check')

		// When the 'Save' button is clicked at the top of the dashboard...
		$( '#wpbooklist-extension-genreric-key-dashboard-form-bulkbookupload' ).on( 'submit', function() {

			var license = $( this ).find( '.wpbooklist-extension-genreric-key-dashboard-input' ).val();

			// Make Ajax call to get display options.
			var data = {
				'action': 'wpbooklist_bulkbookupload_save_license_key_action',
				'security': wpbooklistBulkBookUploadPhpVariables.adminnonce1,
				'license': license
			};

			console.log(data);

			$.post( ajaxurl, data, function( response ) {

				document.location.reload( true );

			});


			event.preventDefault ? event.preventDefault() : event.returnValue = false;

		});

		// When the 'Save' button is clicked from the plugin's entry...
		$( '#wpbooklist-extension-genreric-key-plugins-page-button-bulkbookupload' ).on( 'click', function() {

			var license = $( this ).prev().val();

			// Make Ajax call to get display options.
			var data = {
				'action': 'wpbooklist_bulkbookupload_save_license_key_action',
				'security': wpbooklistBulkBookUploadPhpVariables.adminnonce1,
				'license': license
			};

			console.log(data);

			$.post( ajaxurl, data, function( response ) {

				document.location.reload( true );

			});
			event.preventDefault ? event.preventDefault() : event.returnValue = false;
		});
	}


	/* ENDING SECTION TO CALL ALL FUNCTIONS IN FILE... */

	// Function to display the admin pointer message when entering the Question Mark image with mouse...
	function wpbooklistBulkBookUploadAdminPointersJavascript() {

		$( 'body' ).on( 'mouseenter', '.wpbooklist-icon-image-question', function() {

			var label = $( this ).attr( 'data-label' );
			var pointer;

			// Switch for which admin message to display
			switch ( label ) {
			case 'book-form-isbn10':
				pointer = $( this ).pointer({
					content: '<h3>' + wpbooklistPhpVariables.trans135 + '</h3><p class="wpbooklist-admin-pointer">' + wpbooklistPhpVariables.trans173 + '.</p>',
					position: {
						edge: 'right',
						align: 'right'
					}
				});
				break;
			default:
			}

			// Open the pointer on mouseenter.
			pointer.pointer( 'open' );

			// Close the pointer on mouseleave.
			$( 'body' ).on( 'mouseleave', '.wpbooklist-icon-image-question', function() {
				pointer.pointer( 'close' );
			});

		});

		$( 'body' ).on( 'mouseenter', '.wpbooklist-icon-image-question-with-link', function() {

			var label = $( this ).attr( 'data-label' );
			var pointer;

			// Switch for which admin message to display
			switch ( label ) {
			case 'book-form-libraries':
				pointer = $( this ).pointer({
					content: '<h3>' + wpbooklistPhpVariables.trans203 + '</h3><p class="wpbooklist-admin-pointer">' + wpbooklistPhpVariables.trans204 + wpbooklistPhpVariables.SETTINGS_PAGE_URL + wpbooklistPhpVariables.trans205 + '.</p>',
					position: {
						edge: 'right',
						align: 'right'
					}
				});
				break;
			default:
			}

			// Open the pointer on mouseenter
			pointer.pointer( 'open' );

		});
	}


	// Function that will actualy kick off the adding of books.
	function wpbooklistBulkBookUploadPluginAddBooks(){

		$("#wpbooklist-bulkbookupload-button").click(function(event){

	  		// Calling the function that will supposedly prevent computers from sleeping to further ensure backup success
			sleep.prevent();

	  		// Gather info from page
	  		var amazonAuthYes = $( "input[name='authorize-amazon-yes']" ).prop('checked');
	  		var amazonAuthNo = $( "input[name='authorize-amazon-no']" ).prop('checked');
	  		var library = $('#wpbooklist-bulkbookupload-select-library').val();
	  		var createPost = $( "input[name='bulk-upload-create-post']" ).prop('checked');
	  		var createPage = $( "input[name='bulk-upload-create-page']" ).prop('checked');
	  		var woocommerce = $( "input[name='bulk-upload-create-woo']" ).prop('checked');
	  		var isbnString = $('#wpbooklist-bulkbookupload-textarea').val();
	  		var statusDiv = $('#wpbooklist-bulkbookupload-status-div');
	  		var spinner = $('#wpbooklist-spinner-bulkbookupload');
	  		var titleResponseDiv = $('#wpbooklist-bulkbookupload-title-response');
	  		var addButton = $('#wpbooklist-bulkbookupload-button');
	  		var smileIcon = $('#wpbooklist-smile-icon-1');
	  		var titleResponse = '';
	  		var totalAdded = 0;
	  		var scrollTop = 0;
	  		var amazonAuthQuestion = $("#auth-amazon-question-label");
	  		var errorFlag = false;
	  		var errorCounter = 0;
	  		var failedIsbns = '';
	  		var isbnIterator = 0;

	  		// Reset UI elements
	  		titleResponseDiv.animate({'opacity':'0', 'height':'0px'}, 1000);
	  		statusDiv.animate({'opacity':'0', 'margin-bottom':'0px'}, 1000);

	  		// Trim a possible comma and whitespace from the end of the string
	  		isbnString.replace(/,\s*$/, "");

	  		// Create ISBN array
	  		var isbnArray = isbnString.split(',');

	  		var totalIsbns = isbnArray.length;

	  		// Estimate completion time
	  		var estimateTime = totalIsbns*4
	  		estimateTime = Math.round(estimateTime/60);
	  		if(estimateTime < 1){
	  			estimateTime = 'Less Than 1 Minute';
	  		} 
	  		if(estimateTime == 1){
	  			estimateTime = '1 Minute';
	  		}
	  		if(estimateTime > 1){
	  			estimateTime = estimateTime+' Minutes';
	  		}

	  		// Check Amazon Authorization
		    if(amazonAuthYes === false && amazonAuthNo === false){
				amazonAuthQuestion.css({'font-weight':'bold','color':'red'});
				scrollTop = amazonAuthQuestion.offset().top-50;
				errorFlag = true;
				// Scroll the the highest flagged element 
				if(scrollTop != 0){
				  $('html, body').animate({
				    scrollTop: scrollTop
				  }, 500);
				  scrollTop = 0;
				}
		    }
	  		
	  		// If Amazon Auth has been selected (one way or another), then proceed.
		    if(errorFlag === false){
		    	addButton.prop('disabled', true);
		  		spinner.animate({'opacity':'1'}, 1000);
		  		statusDiv.animate({'opacity':'1', 'margin-bottom':'90px'}, 1000);
		  		statusDiv.html('<p>Adding <span class="wpbooklist-color-orange-italic">'+totalIsbns+'</span> Books...</p><p>Total Estimated Time: '+estimateTime+'</p>');

		  		// One Ajax call per ISBN number
		  		(function wpbooklist_bulk_add_book_worker() {
		  			isbnArray[isbnIterator] = isbnArray[isbnIterator].replace(/-/g,'');

		  			if ( 'true' === createPage || true === createPage ) {
		  				createPage = 'Yes';
		  			}

		  			if ( 'true' === createPost || true === createPost ) {
		  				createPost = 'Yes';
		  			}

		  			if ( 'true' === woocommerce || true === woocommerce ) {
		  				woocommerce = 'Yes';
		  			}
		  			
		  			var data = {
						'action': 'wpbooklist_bulkbookupload_action',
						'security': wpbooklistBulkBookUploadPhpVariables.adminnonce2,
						'amazonAuthYes':amazonAuthYes,
						'library':library,
						'createPost':createPost,
						'createPage':createPage,
						'woocommerce':woocommerce,
						'isbn':isbnArray[isbnIterator]
					};

					console.log('Data being sent to the server');
					console.log(data);

					var request = $.ajax({
					    url: ajaxurl,
					    type: "POST",
					    data:data,
					    timeout: 0,
					    success: function(response) {

					    	console.log(response)
					    	response = response.split('---sep---sep---');

					    	// If the ajax call was succesful but the book wasn't found or some other error retreiving the book information occurred (probably due to a bad ISBN number)
					    	if(response[0] == '' || response[0] == 'undefined' || response[0] == undefined){
					    		failedIsbns = failedIsbns+','+response[1];
					    		errorCounter++;
					    	} else {
					    		totalAdded++;
					    		// Handle UI progress updates
						    	titleResponseDiv.scrollTop(titleResponseDiv.prop("scrollHeight"));
						    	titleResponseDiv.animate({'opacity':'1'}, 1000);
						    	smileIcon.animate({'opacity':'1'}, 1000);
						   		titleResponseDiv.css({'height':'155px'});
						    	titleResponse = titleResponse+" Added<br/><span class='wpbooklist-bulkbookupload-response-span'>'"+response[0]+"'</span><br/>";
						    	titleResponseDiv.html(titleResponse);

						    	statusDiv.html('<p>Adding <span class="wpbooklist-color-orange-italic">'+totalIsbns+'</span> Books...</p><p>Total Estimated Time: '+estimateTime+'</p><p>Succesfully Added <span class="wpbooklist-color-orange-italic">'+totalAdded+'</span> books!<p>');

						    	var objDiv = document.getElementById("wpbooklist-bulkbookupload-title-response");
								objDiv.scrollTop = objDiv.scrollHeight;
					    	}

					    	// handling UI stuff once all books have made an attempt to be added
					    	if(totalAdded == (totalIsbns-errorCounter)){
					    		spinner.animate({'opacity':'0'}, 1000);
					    		failedIsbns = failedIsbns.replace(/^,|,$/g,'');
					    		var failedIsbnsArray = failedIsbns.split(',');
					    		var failedIsbnsArrayUnique = [];

					    		// Making the failed ISBN unique array
								$.each(failedIsbnsArray, function(i, el){
								    if($.inArray(el, failedIsbnsArrayUnique) === -1) failedIsbnsArrayUnique.push(el);
								});

								// Creating ISBN error message
								var errorReportString = '';
								if(failedIsbnsArrayUnique.length > 0 && failedIsbnsArrayUnique[0] != ''){
									for (var i = failedIsbnsArrayUnique.length - 1; i >= 0; i--) {
										if(failedIsbnsArrayUnique[i] != 'undefined' && failedIsbnsArrayUnique[i] != undefined){
											errorReportString = errorReportString+'<p class="wpbooklist-bulkbookupload-error-isbn">'+failedIsbnsArrayUnique[i]+'</p>'
										}
									}
									titleResponseDiv.html('<p id="wpbooklist-bulkbookupload-isbn-error-message"><span class="wpbooklist-color-orange-italic">WPBookList</span> had trouble finding information for these ISBN Numbers:</p>'+errorReportString);
									titleResponseDiv.animate({ scrollTop: 0 }, "fast");
								}

								console.log('Here\'s an array of all the failed ISBN/ASIN numbers:')
					    		console.log(failedIsbnsArrayUnique);
					    		addButton.prop('disabled', false);
					    	}
					    	// TODO: Update UI here - create message like 'succesfully added x books', or 'add booktitle succesfully!'
					    },
						error: function(jqXHR, textStatus, errorThrown) {
							console.log(errorThrown);
				            console.log(textStatus);
				            console.log(jqXHR);
				            errorCounter++;
						},
						complete: function() {
							isbnIterator++;
					      	// Schedule the next request when the current one's complete, if we're not doen already
					      	if(totalAdded != (totalIsbns-errorCounter)){
								setTimeout(wpbooklist_bulk_add_book_worker, 1000);
							}
					    }
					});
				})();
	  		}
			event.preventDefault ? event.preventDefault() : event.returnValue = false;
	  	});
	}
});
